# Relationships

```elixir
Application.put_env(:ash, :validate_api_resource_inclusion?, false)
Application.put_env(:ash, :validate_api_config_inclusion?, false)
Mix.install([:ash], consolidate_protocols: false)
```

## Relationships

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="customizing_actions.livemd">Customizing Actions</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="managing_relationships.livemd">Managing Relationships</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

### In this tutorial you will create a relationship between a Ticket and Representative resource

Create a `relationships do .. end` block in the Ticket resource.

Inside the `relationships` block, define a `belongs_to` representative like so:

`belongs_to :representative, Tutorial.Support.Representative`

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  defmodule Tutorial.Support.Ticket do

  # ...

    relationships do
      # belongs_to means that the destination attribute is unique, meaning only one related record could exist.
      # We assume that the destination attribute is `representative_id` based
      # on the name of this relationship and that the source attribute is `representative_id`.
      # We create `representative_id` automatically.
      belongs_to :representative, Tutorial.Support.Representative
    end

  # ...
  ```

  </div>
</details>

### Enter your solution

```elixir
defmodule Tutorial.Support.Ticket do
  use Ash.Resource,
    data_layer: Ash.DataLayer.Ets

  actions do
    defaults([:create, :read])
  end

  attributes do
    uuid_primary_key(:id)
    attribute(:subject, :string, allow_nil?: false)
    attribute(:description, :string)

    attribute :status, :atom do
      constraints(one_of: [:open, :closed])
      default(:open)
      allow_nil?(false)
    end

    create_timestamp(:created_at)
    update_timestamp(:updated_at)
  end

  # <-- Add the relationship here
end

defmodule Tutorial.Support.Representative do
  use Ash.Resource,
    data_layer: Ash.DataLayer.Ets

  actions do
    defaults([:create, :read])
  end

  attributes do
    uuid_primary_key(:id)
    attribute(:name, :string)
  end
end
```

```elixir
defmodule Tutorial.Support do
  use Ash.Api

  resources do
    resource(Tutorial.Support.Ticket)
    resource(Tutorial.Support.Representative)
  end
end
```

## Creating a Ticket record with a representative Relationship

First, create the representative Joe.

```elixir
# Creates a Representative
joe =
  Tutorial.Support.Representative
  |> Ash.Changeset.for_create(:create, %{name: "Joe Armstrong"})
  |> Tutorial.Support.create!()
```

Next up, create a ticket and assign the representative Joe to the ticket.

```elixir
# Creates a Ticket with the representative
Tutorial.Support.Ticket
|> Ash.Changeset.for_create(:create, %{subject: "My spoon is too big!", representative_id: joe.id})
|> Tutorial.Support.create!()
# `load!/2` loads in the representative. Try removing this line to see what changes
|> Tutorial.Support.load!([:representative])
```

As you can see it didn't quite work. The `representative_id` was set to `nil`. That is because by default, the primary key isn't directly assignable to the parent.

You can override this behaviour by setting `attribute_writable? true` on the `belongs_to :representative` relationship in the resource definition.

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  relationships do
    belongs_to :representative, Tutorial.Support.Representative do
      # With the following modification the attribute can be written to, during the :create action:
      attribute_writable? true
    end
  end
  ```

  </div>
</details>

After making the change, try running the code again, you should now see that the representative was correctly assigned.

<!-- livebook:{"break_markdown":true} -->

This is one way of creating relationships. To see a more idiomatic and succinct way of doing things, follow to next tutorial.

<!-- livebook:{"break_markdown":true} -->

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="customizing_actions.livemd">Customizing Actions</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="managing_relationships.livemd">Managing Relationships</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
